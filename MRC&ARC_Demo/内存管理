内存管理：

1.内存布局
   在iOS开发过程中，为了合理的分配有限的内存空间，将内存区域分为五个区，由低地址向高地址分类分别是：代码区、常量区、全局静态区、堆、栈。

栈（stack）：是有编译器自动分配并释放，存放函数的参数值，局部变量的值等。
           栈是向低地址扩展的数据结构，是连续的内存区域，采用先进后出LIFO。

堆（heap）：由程序员分配和释放，若程序员不释放，程序结束时可能由os回收。
          堆事向高地址扩展的数据结构，是不连续的内存区域，采用链表方式进行存储。

未初始化全局区（.bss）:存放未初始化的全局变量和静态变量，程序结束后自动释放。

初始化全局区（.data）:存放已初始化的全局变量和静态变量，与 未初始化的全局静态区 相邻，程序结束后自动释放。

代码区（.text）：用来存放函数的二进制代码，在运行时要防止被非法修改，只允许读取不许操作



2.内存管理概念：

在OC中引入的内存管理的作用是什么？

    通常比如创建一个OC对象、定义一个变量、调用一个函数或者方法都会占用内存空间；一个应用程序所使用的内存是有限的，如果程序占用内存过大，系统可能会强制关闭程序，造成程序崩溃、闪退现象，影响用户体验。所以，我们需要进行合理的分配内存、清除内存，回收那些不需要再使用的对象。从而保证程序的稳定性。

    上述讲到，堆和栈的原则，首先栈是由编译器自动分配释放的，因此栈不需要程序员去做内存管理。堆是由程序员手动释放，因此需要对这块区域进行管理内存。

    栈是连续的存储空间，且栈的大小是有限的，采用后进先出有序的创建和释放，因此栈排序不会出现不连续和内存浪费现象。

    堆是不连续的存储内存区域，是以链表的方式存储。当创建对象时，会寻找大于或等于申请的heap 节点长度的内存空间，频繁的创建和删除内存块势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。

     由此引入内存管理的概念，以保证高效、快速的分配内存，并且在适当的时候释放和回收内存资源


3.引用计数机制的概念MRC


    在OC中，数据类型主要分为基本数据类型和OC数据类型；其中基本数据类型存放在栈中,例如：int, float, double，此类数据系统可以自动回收，因此无需对其进行内存管理。
    OC对象类型存放在堆中，对于任何继承NSObject的对象，例如：NSString, NSArray等，此类存放需要程序员分配释放。
那么程序员该怎么进行管理呢？那就是我们经常被熟知的引用计数机制。

引用计数机制是个抽象的概念，为了回收不再被使用的对象，从而减少内存空间被占用，系统通过引用计数的值来告诉系统，该对象是否还有用。当对象引用计数大于0时，说明该对象依然还被使用，此时不会被回收；当对象的引用计数为0时，说明该对象已经没有再持有或被持有，则对象会被系统回收，释放掉内存空间；
什么时候会产生引用计数变化呢？

使用alloc、new、copy、mutableCopy这四个关键字创建的对象，自身引用计数为1
引用到该对象需要发送一条retain消息，使引用计数器值+1，说明该对象存在
该对象不再持有或被持有时，发送一条release消息，使引用计数值-1，说明该对象不存在
引用计数值为0时，说明对象不再被使用，调用delloc方法，将该对象释放掉。

- (void)test {
@autoreleasepool {
// 使用alloc创建一个对象，引用计数为1
Person *per = [ [Person alloc] init];
// 使用retain引用计数+1，此时引用计数为2
[per retain];
// 使用retain引用计数-1，此时引用计数为1
[per release];

// 引用计数为0的对象内存被释放掉
}
}



4.ARC

ARC是LLVM和Runtime协作的结果
ARC禁止手动调用retain，release，retainCount,autorelease关键字
ARC新增weak，strong关键字

4.1 ARC 下的内存管理问题

ARC 能够解决 iOS 开发中 90% 的内存管理问题，但是另外还有 10% 内存管理，是需要开发者自己处理的，这主要就是与底层 Core Foundation 对象交互的那部分，底层的 Core Foundation 对象由于不在 ARC 的管理下，所以需要自己维护这些对象的引用计数。

对于 ARC 盲目依赖的 iOS 新人们，由于不知道引用计数，他们的问题主要体现在：
    a.过度使用 block 之后，无法解决循环引用问题。
    b.遇到底层 Core Foundation 对象，需要自己手工管理它们的引用计数时，显得一筹莫展。

4.2 循环引用（Reference Cycle）问题

    引用计数这种管理内存的方式虽然很简单，但是有一个比较大的瑕疵，即它不能很好的解决循环引用问题。如下图所示：对象 A 和对象 B，相互引用了对方作为自己的成员变量，只有当自己销毁时，才会将成员变量的引用计数减 1。因为对象 A 的销毁依赖于对象 B 销毁，而对象 B 的销毁与依赖于对象 A 的销毁，这样就造成了我们称之为循环引用（Reference Cycle）的问题，这两个对象即使在外界已经没有任何指针能够访问到它们了，它们也无法被释放。

 -------    持有对象      --------
| 对象A  |------------> |对象B    |
|       |<-----------  |        |
 -------    持有对象     ---------
引用计数=1                引用计数=1


不止两对象存在循环引用问题，多个对象依次持有对方，形式一个环状，也可以造成循环引用问题，而且在真实编程环境中，环越大就越难被发现。下图是 4 个对象形成的循环引用问题。

AA.主动断开循环引用
解决循环引用问题主要有两个办法，第一个办法是我明确知道这里会存在循环引用，在合理的位置主动断开环中的一个引用，使得对象得以回收。根据具体业务逻辑，在不需要的时候主动断开引用。赋值nil，释放内存。

主动断开循环引用这种方式常见于各种与 block 相关的代码逻辑中。例如在开源的 YTKNetwork 网络库中，网络请求的回调 block 是被持有的，但是如果这个 block 中又存在对于 View Controller 的引用，就很容易产生从循环引用，

    1.Controller 持有了网络请求对象
    2.网络请求对象持有了回调的 block
    3.回调的 block 里面使用了 self，所以持有了 Controller
解决办法就是，在网络请求结束后，网络请求对象执行完 block 之后，主动释放对于 block 的持有，以便打破循环引用。相关的代码见：
// https://github.com/yuantiku/YTKNetwork/blob/master/YTKNetwork/YTKBaseRequest.m
// 第 147 行：
- (void)clearCompletionBlock {
// 主动释放掉对于 block 的引用
self.successCompletionBlock = nil;
self.failureCompletionBlock = nil;
}
不过，主动断开循环引用这种操作依赖于程序员自己手工显式地控制，相当于回到了以前 “谁申请谁释放” 的内存管理年代，它依赖于程序员自己有能力发现循环引用并且知道在什么时机断开循环引用回收内存（这通常与具体的业务逻辑相关），所以这种解决方法并不常用，更常见的办法是使用弱引用 (weak reference) 的办法。

BB.使用弱引用

弱引用虽然持有对象，但是并不增加引用计数，这样就避免了循环引用的产生。在 iOS 开发中，弱引用通常在 delegate 模式中使用。举个例子来说，两个 ViewController A 和 B，ViewController A 需要弹出 ViewController B，让用户输入一些内容，当用户输入完成后，ViewController B 需要将内容返回给 ViewController A。这个时候，View Controller 的 delegate 成员变量通常是一个弱引用，以避免两个 ViewController 相互引用对方造成循环引用问题，如下所示：


弱引用的实现原理
弱引用的实现原理是这样，系统对于每一个有弱引用的对象，都维护一个表来记录它所有的弱引用的指针地址。这样，当一个对象的引用计数为 0 时，系统就通过这张表，找到所有的弱引用指针，继而把它们都置成 nil。

从这个原理中，我们可以看出，弱引用的使用是有额外的开销的。虽然这个开销很小，但是如果一个地方我们肯定它不需要弱引用的特性，就不应该盲目使用弱引用。举个例子，有人喜欢在手写界面的时候，将所有界面元素都设置成 weak 的，这某种程度上与 Xcode 通过 Storyboard 拖拽生成的新变量是一致的。但是我个人认为这样做并不太合适。因为：

我们在创建这个对象时，需要注意临时使用一个强引用持有它，否则因为 weak 变量并不持有对象，就会造成一个对象刚被创建就销毁掉。
大部分 ViewController 的视图对象的生命周期与 ViewController 本身是一致的，没有必要额外做这个事情。
。
使用 Xcode 检测循环引用
Xcode 的 Instruments 工具集可以很方便的检测循环引用。为了测试效果，我们在一个测试用的 ViewController 中填入以下代码，该代码中的 firstArray 和 secondArray 相互引用了对方，构成了循环引用。

- (void)viewDidLoad
{
[super viewDidLoad];
NSMutableArray *firstArray = [NSMutableArray array];
NSMutableArray *secondArray = [NSMutableArray array];
[firstArray addObject:secondArray];
[secondArray addObject:firstArray];
}
在 Xcode 的菜单栏选择：Product -> Profile，然后选择 “Leaks”，再点击右下角的”Profile” 按钮开始检测。Instruments 中会用一条红色的条来表示一次内存泄漏的产生。如下图所示：
    切换到 Leaks 这栏，点击”Cycles & Roots”，就可以非常方便地找到循环引用的对象了。



总结
在 ARC 的帮助下，iOS 开发者的内存管理工作已经被大大减轻，但是我们仍然需要理解引用计数这种内存管理方式的优点和常见问题，特别要注意解决循环引用问题。对于循环引用问题有两种主要的解决办法，一是主动断开循环引用，二是使用弱引用的方式避免循环引用。对于 Core Foundation 对象，由于不在 ARC 管理之下，我们仍然需要延续以前手工管理引用计数的办法。

在调试内存问题时，Instruments 工具可以很好地对我们进行辅助，善用 Instruments 可以节省我们大量的调试时间。


博客地址：
https://www.jianshu.com/p/79f9d1992879
https://blog.devtang.com/2016/07/30/ios-memory-management/
https://www.jianshu.com/p/0453a18448ab
